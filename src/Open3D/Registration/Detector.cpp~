// ----------------------------------------------------------------------------
// -                        Open3D: www.open3d.org                            -
// ----------------------------------------------------------------------------
// The MIT License (MIT)
//
// Copyright (c) 2018 www.open3d.org
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.
// ----------------------------------------------------------------------------

#include "Feature.h"
#include <Eigen/Dense>
#include <Eigen/Eigenvalues>
#include <Open3D/Geometry/PointCloud.h>
#include <Open3D/Geometry/KDTreeFlann.h>

namespace open3d {
    using namespace geometry;
    double sqr(double x) { return x * x; }

    std::pair<Eigen::Vector3d, std::vector<Eigen::Vector3d> >
    FastEigen3x3(const Eigen::Matrix3d &A) {
    // Based on:
    // https://en.wikipedia.org/wiki/Eigenvalue_algorithm#3.C3.973_matrices
    // And I know, Don't repeat yourself...
    double p1 = sqr(A(0, 1)) + sqr(A(0, 2)) + sqr(A(1, 2));
    Eigen::Vector3d eigenvalues;
    if (p1 == 0.0) {
        eigenvalues(2) = std::min(A(0, 0), std::min(A(1, 1), A(2, 2)));
        eigenvalues(0) = std::max(A(0, 0), std::max(A(1, 1), A(2, 2)));
        eigenvalues(1) = A.trace() - eigenvalues(0) - eigenvalues(2);
    } else {
        double q = A.trace() / 3.0;
        double p2 = sqr((A(0, 0) - q)) + sqr(A(1, 1) - q) + sqr(A(2, 2) - q) +
                    2 * p1;
        double p = sqrt(p2 / 6.0);
        Eigen::Matrix3d B = (1.0 / p) * (A - q * Eigen::Matrix3d::Identity());
        double r = B.determinant() / 2.0;
        double phi;
        if (r <= -1) {
            phi = M_PI / 3.0;
        } else if (r >= 1) {
            phi = 0.0;
        } else {
            phi = std::acos(r) / 3.0;
        }
        eigenvalues(0) = q + 2.0 * p * std::cos(phi);
        eigenvalues(2) = q + 2.0 * p * std::cos(phi + 2.0 * M_PI / 3.0);
        eigenvalues(1) = q * 3.0 - eigenvalues(0) - eigenvalues(2);
    }

    Eigen::Vector3d eigenvector =
            (A - Eigen::Matrix3d::Identity() * eigenvalues(0)) *
            (A.col(0) - Eigen::Vector3d(eigenvalues(1), 0.0, 0.0));
    double len = eigenvector.norm();
    if (len == 0.0) {
        return Eigen::Vector3d::Zero();
    } else {
        return eigenvector.normalized();
    }

} // namespace open3d
